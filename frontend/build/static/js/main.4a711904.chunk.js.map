{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","isCs","setisCs","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","direction","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","notif","n","as","Button","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a711904.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","\nimport { Radio, RadioGroup,Stack } from '@chakra-ui/react'\n\nimport { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [isCs, setisCs] = useState()\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n          isCs,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <FormControl id=\"isCs\">\n                   <FormLabel>Are you a Customer Care Executive</FormLabel>\n                    <RadioGroup onChange={setisCs} value={isCs}>\n                    <Stack direction='col'>\n                      <Radio value='1' p=\"0.5rem\">True</Radio>\n                      <Radio value='0'>False</Radio>\n                     </Stack>\n                    </RadioGroup>\n            </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Customer Support\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; \nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    // setSearch(query);\n    // if (!query) {\n    //   return;\n    // }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Button\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onClick={(e) => handleSearch(e.target.value)}\n              >Add Users</Button>\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    // if (!search) {\n    //   toast({\n    //     title: \"Please Enter something in search\",\n    //     status: \"warning\",\n    //     duration: 5000,\n    //     isClosable: true,\n    //     position: \"top-left\",\n    //   });\n    //   return;\n    // }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search Customer Care\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Customer Support\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Help Desk</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Button onClick={handleSearch}>Search Customer Service</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}